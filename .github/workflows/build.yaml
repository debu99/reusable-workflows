
name: Docker build

on:
  workflow_call:
    inputs:
      WORKING_DIR:
        required: false
        type: string
        default: '.'
      DOCKER_USER:
        required: true
        type: string
      DOCKER_REPO:
        required: true
        type: string
      DOCKER_FILE:
        required: false
        type: string
        default: 'Dockerfile'
    secrets:
      DOCKER_PASSWORD:
        required: true
    outputs:
      NEW_TAG:
        value: ${{ jobs.build.outputs.NEW_TAG }}
      NEW_IMAGE:
        value: ${{ jobs.build.outputs.NEW_IMAGE }}

jobs:
  build:
    name: Docker build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.WORKING_DIR }}
    env:
      DOCKER_USER: ${{ inputs.DOCKER_USER }}
      DOCKER_REPO: ${{ inputs.DOCKER_REPO }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create env
        run: |
          export IMAGE="${DOCKER_USER}/${DOCKER_REPO}"
          export GIT_HASH=$(git rev-parse --short "$GITHUB_SHA")
          echo "IMAGE=$IMAGE GIT_HASH=$GIT_HASH"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "GIT_HASH=$GIT_HASH" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          load: true
          push: false
          context: .
          file: ./${{ inputs.DOCKER_FILE }}
          build-args: |
            APP_VERSION=${{env.GIT_HASH}}
          tags: |
            ${{env.IMAGE}}:${{env.GIT_HASH}}
            ${{env.IMAGE}}:latest
      - name: Scan the image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{env.DOCKER_USER}}/${{env.DOCKER_REPO}}:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'
      - name: Push the image
        id: push
        run: |
          docker images | grep ${{env.IMAGE}}
          docker login -u ${{env.DOCKER_USER}} -p ${{ secrets.DOCKER_PASSWORD }}
          echo "[INFO]IMAGE=${{env.IMAGE}} GIT_HASH=${{env.GIT_HASH}} "
          docker push "${{env.IMAGE}}:${{env.GIT_HASH}}"
          docker push "${{env.IMAGE}}:latest"
          docker manifest inspect --verbose ${{env.IMAGE}}:${{env.GIT_HASH}}
          echo "NEW_TAG=${{env.GIT_HASH}}" >> $GITHUB_OUTPUT
          echo "NEW_IMAGE=${{env.IMAGE}}" >> $GITHUB_OUTPUT
    outputs:
      NEW_TAG: ${{ steps.push.outputs.NEW_TAG }}
      NEW_IMAGE: ${{ steps.push.outputs.NEW_IMAGE }}